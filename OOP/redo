//api.js
import fetch from "node-fetch";

class HttpClient {
  constructor() {
    this.endpoints = {
      posts: {
        create: (options = {}) => {
          return {
            method: "POST",
            resource: `/posts`,
            params: {},
            body: {
              ...options,
            },
          };
        },
        list: (options = {}) => {
          return {
            method: "GET",
            resource: `/posts${options.postId ? `/${options.postId}` : ""}`,
            params: {},
            body: null,
          };
        },
        post: (options = {}) => {
          if (!options.postId) {
            throw new Error("A postId is required for the posts.post method.");
          }

          return {
            method: "GET",
            resource: `/posts/${options.postId}`,
            params: {},
            body: null,
          };
        },
        comments: (options = {}) => {
          if (!options.postId) {
            throw new Error(
              "A postId is required for the posts.comments method."
            );
          }

          return {
            method: "GET",
            resource: `/posts/${options.postId}/comments`,
            params: {},
            body: null,
          };
        },
      },
      users: {
        list: (options = {}) => {
          return {
            method: "GET",
            resource: `/users${options.userId ? `/${options.userId}` : ""}`,
            params: { zipcode: options.zipcode },
            body: null,
          };
        },
        create: (options = {}) => {
          return {
            method: "POST",
            resource: "/users",
            params: {},
            body: {
              ...options,
            },
          };
        },
      },
    };
  }

  //fetch call
  request(endpoint = {}) {
    return fetch(`https://jsonplaceholder.typicode.com${endpoint.resource}`, {
      method: endpoint?.method,
      body: endpoint?.body ? JSON.stringify(endpoint.body) : null,
    })
      .then(async (response) => {
        const data = await response.json();
        return data;
      })
      .catch((error) => {
        return error;
      });
  }

  posts(method = "", options = {}) {
    const existingEndpoint = this.endpoints.posts[method];

    if (existingEndpoint) {
      const endpoint = existingEndpoint(options);
      return this.request(endpoint);
    }
  }

  async users(method = "", options = {}) {
    const existingEndpoint = this.endpoints.users[method];

    // user filter based on zipcode
    if (existingEndpoint && options.zipcode) {
      const data = await fetch("https://jsonplaceholder.typicode.com/users");
      const fetchedUsers = await data.json();
      const filteredUsers = fetchedUsers.filter((iter) => {
        return iter.address.zipcode === options.zipcode;
      });
      if (filteredUsers === undefined || filteredUsers.length == 0) {
        throw new Error("User with given zipcode not found!");
      }
      return filteredUsers;
    }

    if (existingEndpoint) {
      const endpoint = existingEndpoint(options);
      return this.request(endpoint);
    }
  }
}

export default new HttpClient();

// class HttpClient {
//   constructor(options = {}) {
//     this.baseUrl = options.baseUrl || "";
//     // this._headers = options.headers || {};
//   }
//   async _fetchJSON(endpoint, options = {}) {
//     const res = await fetch(this.baseUrl + endpoint, {
//       ...options,
//     });

//     if (!res.ok) throw new Error(res.statusText);

//     if (options.parseResponse !== false && res.status !== 204)
//       return res.json();

//     return undefined;
//   }
//   get(endpoint, options = {}) {
//     return this._fetchJSON(endpoint, {
//       ...options,
//       method: "GET",
//     });
//   }

//   post(endpoint, body, options = {}) {
//     return this._fetchJSON(endpoint, {
//       ...options,
//       body: JSON.stringify(body),
//       method: "POST",
//     });
//   }

//   delete(endpoint, options = {}) {
//     return this._fetchJSON(endpoint, {
//       parseResponse: false,
//       ...options,
//       method: "DELETE",
//     });
//   }
// }

// export default HttpClient;

//oop.js
// //day 3-4 tasks in OOP format

import { ClientRequest } from "http";
import httpClient from "./api.js";
import userApi from "./api.js";

const client = httpClient;
// const data = await client.posts("list");
// console.log(data);

const comment = await client.posts("comments", { postId: 5 });
console.log(comment);

const user = await client.users("list", { zipcode: "76495-3109" });
console.log(user);

const newUser = await client.users("create", { name: "Nauman" });
console.log(newUser);

// const user = new userApi({
//   baseUrl: "https://jsonplaceholder.typicode.com",
// });
// const ez = user.users;
// console.log(ez);


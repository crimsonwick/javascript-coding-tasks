app.get("/posts", async (req, res) => {
  try {
    let data = await fetch("https://jsonplaceholder.typicode.com/posts");
    let result = await data.json();

    //delete url?users=*
    let id = req.query.user;
    id = Number(id);
    if (id) {
      const filtered = result.filter((item) => {
        return item.userId !== id;
      });
      console.log(filtered);
      return res.status(200).send(filtered);
    }

    //searching url?body=*&title=*
    let title = req.query.title;
    let body = req.query.body;

    if (!title && !body) {
      return res.status(200).send(result);
    }

    let filteredPosts = result.filter((iter) => {
      return iter.title.includes(title) || iter.body.includes(body);
    });

    //sorting url?sort=1
    let sort = req.query.sort;
    sort = Number(sort);

    if (filteredPosts.length === 0) {
      filteredPosts = [...result];
    }
    if (!sort) {
      return res.status(200).send(filteredPosts);
    }
    if (sort === 1 && !title && body) {
      filteredPosts.sort((a, b) =>
        a.body > b.body ? 1 : b.body > a.body ? -1 : 0
      );
    } else if (sort === 1 && title && !body) {
      filteredPosts.sort((a, b) =>
        a.title > b.title ? 1 : b.title > a.title ? -1 : 0
      );
    } else if (sort === 1 && title && body) {
      filteredPosts.sort((a, b) => {
        if (a.title == b.title) {
          return a.body < b.body ? -1 : a.body > b.body ? 1 : 0;
        } else {
          return a.title < b.title ? -1 : 1;
        }
      });
    }

    res.status(200).send(filteredPosts);
  } catch (err) {
    console.log(err);
    res.status(500).send("Internal Server Error");
  }
});
